package Test;

// 1번 문제
// -


// -

// 6번 문제
// :
// -> 자바의 모든 클래스는 암시적으로 Object 클래스를 상속받음.
// -> Object 클래스가 가진 toString, equals()등의 메서드를 기본적으로 가짐.

// 7번 문제
// :
// -> 리스트에 저장된 요소의 개수를 반환

// 8번 문제
// :
// → 조건식? 참일 때 값 : 거짓일 때 값
// → int result = (a > b)? a:b;

// 9번 문제
// :
// → 사용 가능 : 추상 메서드, default 메서드, static(정적) 메서드
// → 접근제어자가 생략된 메서드의 경우 기본으로 public abstract으로만 선언
// → default와 static 메서드에서 private 접근제어자 사용이 가능
// ● 단, private 메서드는 인터페이스 내부에서만 호출 가능

// 10번 문제
// :
// → 단, 하나의 추상 메서드만 허용/dafault와 static 메서드에 대한 추가 정의가 불가!

// 11번 문제
// :
// →  Child 클래스에서 display() 메서드를 재정의 했기 때문에 실행 시점에 실제 객체의 메서드가 호출
// → 업캐스팅된 객체에서 메서드를 호출할 때는 오버라이딩된 메서드가 실행 → 동적 바인딩
// → cf) '업캐스팅'에서 자식 메서드 실행 가능 여부
//   1) 오버라이딩 메서드
//      → 부모 클래스에서 정의된 메서드를 자식 클래스에서 오버라이딩한 경우, 자식 클래스의 메서드가 호출
//      → 업캐스팅과 상관없이 실제 객체(Child)의 메서드가 실행

//   2) 자식만이 가진 고유 메서드
//      → 업캐스팅 된 상태에서는 부모 객체 변수로 자식 클래스의 고유 메서드 호출이 불가
//      → 자식 메서드 호출 시 다운 캐스팅이 필요

// 12번 문제
// :

// 13번 문제
// :
// → '자식 클래스'가 추상 메서드를 모두 구현한 후에 객체 생성이 가능

// 14번 문제
// :

// 15번 문제
// :
// → 필드가 많거나 생성자 매개변수가 복잡한 객체를 쉽게 생성하도록 도와줌

// 16번 문제
// :
// → 사용자 입력을 처리하고, 모델과 뷰를 연결하는 역할

// 17번 문제
// :
// → 자바 9부터 private 메서드를 인터페이스 내부에서 사용 가능

// 18번 문제
// :
// → 추상 클래스는 static 메서드를 가질 수 있음!
// → 인터페이스도 static 메서드를 가질 수 있음!

// 19번
// :




// 20번
// :


import chapter12.model.Student;

import javax.net.ssl.SSLContextSpi;
import java.util.Scanner;

public class Test {
    public static void main(String[] args) {
    // 2번 문제


    // 3번 문제
        // 3-1)







    // 4번 문제


    // 5번 문제
    // : class Test 바로 위에 클래스를 작성하고 main 메서드 내부에서 객체를 생성하세요.
        //5-1)



    }
}
